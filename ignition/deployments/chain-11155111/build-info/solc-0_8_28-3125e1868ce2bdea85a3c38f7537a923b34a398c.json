{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-3125e1868ce2bdea85a3c38f7537a923b34a398c",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/PYUSDSubscription.sol": "project/contracts/PYUSDSubscription.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/PYUSDSubscription.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n// OpenZeppelin'in standart ERC20 arayüzünü (interface) import ediyoruz.\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// Kontrat sahibini (owner) yönetecek yardımcı import.\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title PYUSDSubscription\n * @dev Kullanıcıların PYUSD kullanarak \"token-gated\" bir hizmete \n * abone olmasını sağlayan kontrat.\n */\ncontract PYUSDSubscription is Ownable {\n\n    // --- State Değişkenleri ---\n\n    IERC20 public immutable pyusdToken;\n    uint256 public immutable subscriptionFee;\n    uint256 public immutable subscriptionPeriod;\n    mapping(address => uint256) public subscriberExpiresAt;\n\n\n    // --- Event (Olay) ---\n    /**\n     * @dev Bir abonelik (yeni veya yenileme) başarılı olduğunda\n     * tetiklenir.\n     */\n    event SubscriptionUpdated(address indexed user, uint256 expiresAt);\n\n\n    // --- Constructor ---\n\n    constructor(\n        address _pyusdAddress,\n        uint256 _fee,\n        uint256 _period,\n        address _initialOwner\n    ) Ownable(_initialOwner) {\n        require(_pyusdAddress != address(0), \"PYUSD adresi sifir olamaz\");\n        require(_fee > 0, \"Ucret sifirdan buyuk olmali\");\n        require(_period > 0, \"Sure sifirdan buyuk olmali\");\n        \n        pyusdToken = IERC20(_pyusdAddress);\n        subscriptionFee = _fee;\n        subscriptionPeriod = _period;\n    }\n\n\n    // --- DÜZELTİLMİŞ VE EKLENMİŞ KISIM ---\n\n    /**\n     * @dev Kullanıcının (msg.sender) aboneliğini başlatır veya yeniler.\n     * DİKKAT: Solidity testinden (Subscription.t.sol)\n     * çağrılabilmesi için 'external' yerine 'public' olmalıdır.\n     */\n    // '@title' etiketi fonksiyonlar için geçerli olmadığından kaldırıldı.\n    function subscribe() public { // <-- 'external' yerine 'public' olarak düzeltildi\n        address user = msg.sender;\n\n        // 1. Onay Kontrolü: Kullanıcı bu kontrata yeterli harcama izni verdi mi?\n        uint256 allowance = pyusdToken.allowance(user, address(this));\n        require(allowance >= subscriptionFee, \"PYUSD onayi yetersiz\");\n\n        // 2. Token Transferi (\"Pull\" Mantığı):\n        bool sent = pyusdToken.transferFrom(user, address(this), subscriptionFee);\n        require(sent, \"PYUSD transferi basarisiz\");\n\n        // 3. Abonelik Süresini Ayarla (Yenileme Mantığı Dahil):\n        uint256 currentExpiration = subscriberExpiresAt[user];\n        uint256 newExpiration;\n\n        if (currentExpiration > block.timestamp) {\n            // Aktif abonelik (Yenileme)\n            newExpiration = currentExpiration + subscriptionPeriod;\n        } else {\n            // Yeni veya süresi dolmuş abonelik\n            newExpiration = block.timestamp + subscriptionPeriod;\n        }\n        \n        subscriberExpiresAt[user] = newExpiration;\n\n        // 4. Olayı Yayınla:\n        emit SubscriptionUpdated(user, newExpiration);\n    }\n\n    /**\n     * @dev Belirtilen adresin aboneliğinin aktif olup olmadığını kontrol eder.\n     * Test kontratının (Subscription.t.sol) buna erişebilmesi gerekir.\n     */\n    // '@title' etiketi fonksiyonlar için geçerli olmadığından kaldırıldı.\n    function isSubscriberActive(address _subscriber) public view returns (bool) {\n        // Kullanıcının abonelik bitiş tarihi, şu anki blok zamanından\n        // büyükse, aboneliği aktiftir.\n        return subscriberExpiresAt[_subscriber] > block.timestamp;\n    }\n    \n}"
      }
    }
  }
}